/*
把数字翻译成字符串
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。
请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
 */

/*
动态规划
因为本体字符串从头或从尾遍历的结果是一样的，所以采取从尾求余得到最末尾两个数字的方法
此题有 f(n)=f(n-1)+f(n-2)  当当前末尾两数字小于等于25
    或f(n)=f(n-1)         当当前末尾两数字大于25
因此每轮对末尾两数字进行判断，之后更新值
 */
public class JZ46 {
}

class JZ46Solution {
    public int translateNum(int num) {
        int a = 1;  // f(n-1)
        int b = 1;  // f(n-2)
        int x = 0;  // 倒数第二位数字
        int y = num % 10;   //倒数第一位数字
        while(num != 0){
            num /= 10;
            x = num % 10;
            int temp = 10*x + y;    // 得到末尾两数字
            int c = (temp >= 10 && temp <= 25) ? a+b : a;   // f(n)
            //下一轮迭代f(n+1)=f(n)+f(n-1)
            b = a;
            a = c;
            y = x;
        }
        return a;
    }
}